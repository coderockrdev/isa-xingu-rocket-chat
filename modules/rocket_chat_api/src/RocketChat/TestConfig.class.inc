<?php
/**
 * Created by PhpStorm.
 * User: lawri
 * Date: 6/25/17
 * Time: 3:41 PM
 */

namespace Drupal\rocket_chat_api\RocketChat {

  class Test7Config extends Drupal8Config {

    private $userId;
    private $userToken;
    private $server = "http://127.0.0.1:3000";

    /**
     * Retrieves the Storage from a Drupal 7 Variables container
     * @param string $elementName
     *   Name of the Variable to get.
     * @param string $default
     *   A Optional default for when none is found.
     *
     * @return string
     *   The value stored or the default or NUll.
     */
    public function getElement($elementName, $default = NULL) {
      switch($elementName) {
        case "rocket_chat_uid": return $this->userId;
        case "rocket_chat_uit": return $this->userToken;
        case "rocket_chat_url": return $this->server;
        default : return $default;
      }
    }

    public function getJsonDecoder() {
      // TODO: Change the autogenerated stub
      return parent::getJsonDecoder();
    }

    /**
     * @param string $elementName
     *  Key value to set in the RocketChatConfigInterface Backend.
     * @param string $newValue
     *  the new Value to store.
     */
    public function setElement($elementName, $newValue) {
      switch($elementName) {
        case "rocket_chat_uid": $this->userId = $newValue;
                                break;
        case "rocket_chat_uit": $this->userToken = $newValue;
                                break;
        case "rocket_chat_url": $this->server = $newValue;
                                break;
        default : fwrite(STDERR,"TEST SET [$elementName=>$newValue]\n");
      }
    }

    /**
     * is this a Debug / verbose Run.
     *
     * @return bool
     */
    public function isDebug() {
      return FALSE;
    }

    /**
     * @param string $message
     *   Message to report back.
     * @param string $type
     *   Type or Level of the Message
     *
     * @return mixed
     *   Notification Result.
     */
    public function notify($message, $type) {
      return fwrite(STDERR,"Message [$type=>$message]\n");
    }
  }
}

namespace {

  /**
   * {@inheritdoc}
   */
  function drupal_json_decode($json) {
    return \GuzzleHttp\json_decode($json, TRUE);
  }

}
